---
- name: Playbook to install k8s on raspberry pis
  hosts: pis
  become: yes
  gather_facts: no
  tasks:
  - name: Updates package cache, performs system upgrade, and cleans up unnecessary package files
    ansible.builtin.apt:
      update_cache: yes
      upgrade: dist
      cache_valid_time: 3600
      autoclean: yes
      autoremove: yes

  - name: Reboot the system to apply updates
    ansible.builtin.reboot:
      msg: "Rebooting after performing upgrade and cleaning files"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30

  - name: Check whether a package called dphys-swapfile is installed
    ansible.builtin.package_facts:
      manager: auto

  - name: Turn off "dphys-swapfile"
    ansible.builtin.command: dphys-swapfile swapoff
    when: "'dphys-swapfile' in ansible_facts.packages"

  - name: Uninstall "dphys-swapfile"
    ansible.builtin.command: dphys-swapfile uninstall
    when: "'dphys-swapfile' in ansible_facts.packages"

  - name: Remove and purge "dphys-swapfile" package
    ansible.builtin.apt:
      pkg: dphys-swapfile
      state: absent
      purge: yes
      autoclean: yes
      autoremove: yes
    when: "'dphys-swapfile' in ansible_facts.packages"

  - name: Append cgroup settings to /boot/firmware/cmdline.txt
    ansible.builtin.lineinfile:
      path: /boot/firmware/cmdline.txt
      regexp: '^(.*rootwait.*)$'
      line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
      backrefs: yes

  - name: Reboot the system to apply cgroup changes
    ansible.builtin.reboot:
      msg: "Rebooting after cgroup configuration"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30

  - name: Install containerd as the container runtime
    ansible.builtin.apt:
      pkg:
        - containerd
        - containernetworking-plugins

  - name: Configure containerd
    ansible.builtin.copy:
      content: |
        version = 2
        [plugins]
          [plugins."io.containerd.grpc.v1.cri"]
            [plugins."io.containerd.grpc.v1.cri".containerd]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                  runtime_type = "io.containerd.runc.v2"
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                    SystemdCgroup = true
      dest: /etc/containerd/config.toml
      backup: yes
      owner: root
      group: root
      mode: '0644'

  - name: Create k8s.conf file in the /etc/modules-load.d directory
    ansible.builtin.copy:
      content: |
        overlay
        br_netfilter
      dest: /etc/modules-load.d/k8s.conf
      backup: yes
      owner: root
      group: root
      mode: '0644'

  - name: Load overlay
    ansible.builtin.command: modprobe overlay

  - name: Load br_netfilter
    ansible.builtin.command: modprobe br_netfilter

  - name: Create k8s.conf file in /etc/sysctl.d directory
    ansible.builtin.copy:
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
      dest: /etc/sysctl.d/k8s.conf
      backup: yes
      owner: root
      group: root
      mode: '0644'

  - name: Run sysctl --system
    ansible.builtin.command: sysctl --system

  - name: Install apt-transport-https ca-certificates
    ansible.builtin.apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl

  - name: Ensure the keyrings directory exists
    file:
      path: /etc/apt/keyrings
      state: directory

  - name: Add Kubernetes apt repository
    copy:
      dest: /etc/apt/sources.list.d/kubernetes.list
      content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"

  - name: Create keyrings directory and import GPG key
    shell: |
      mkdir -p /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg > /dev/null 2>&1
    args:
      removes: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

  - name: Clean apt cache
    command: apt-get clean

  - name: Update apt package
    apt:
      update_cache: yes

  - name: Install Kubernetes components
    apt:
      name:
        - kubelet
        - kubeadm
        - kubectl
      state: present
  
  - name: Hold kubelet
    ansible.builtin.dpkg_selections:
      name: kubelet
      selection: hold
  
  - name: Hold kubeadm
    ansible.builtin.dpkg_selections:
      name: kubeadm
      selection: hold

  - name: Hold kubectl
    ansible.builtin.dpkg_selections:
      name: kubectl
      selection: hold

  - name: Download and install Flannel
    ansible.builtin.get_url:
      url: https://github.com/flannel-io/flannel/releases/download/v0.19.2/flanneld-arm64
      dest: /usr/local/bin/flanneld
      owner: root
      group: root
      mode: '0755'

  - name: Create Flannel networks directory
    ansible.builtin.file:
      path: /var/lib/k8s/flannel/networks
      state: directory
      recurse: yes
      owner: root
      group: root
      mode: '0755'

  - name: Reboot after installation is complete
    ansible.builtin.reboot:
      msg: "Rebooting after k8s installation is complete"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30