apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd
  namespace: argocd
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  spec:
  tls:
    - hosts:
        - argocd.jenniferpweir.com
      secretName: secret-jenniferpweir-com
  rules:
    - host: argocd.jenniferpweir.com
      http:
        paths:
        - pathType: ImplementationSpecific
          path: "/*"   # use * for the js and css to load properly
          backend:
            service:
              name: argocd-server
              port:
                number: 80

# kubectl apply -f path_to_ingress.yaml
# kubectl get ingress -n argocd

# apiVersion: networking.k8s.io/v1
# kind: Ingress with Passthrough SSL
# metadata:
#   name: argocd-server-ingress
#   namespace: argocd
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-prod
#     nginx.ingress.kubernetes.io/ssl-passthrough: "true"
#     # If you encounter a redirect loop or are getting a 307 response code
#     # then you need to force the nginx ingress to connect to the backend using HTTPS.
#     #
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
# spec:
#   ingressClassName: nginx
#   rules:
#   - host: argocd.example.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: argocd-server
#             port:
#               name: https
#   tls:
#   - hosts:
#     - argocd.example.com
#     secretName: argocd-server-tls # as expected by argocd-server